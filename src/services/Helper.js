import simplify from 'simplify-js';

export const Variance = (arr) => {
    
    const mean = Mean(arr);
    const variance = Mean(arr.map((d) => {
        return Math.pow(d-mean, 2);
    }));
    return variance;
}

const reducer = (accumulator, currentValue) => accumulator+currentValue;

export const Mean = (arr) => {
    const sum = arr.reduce(reducer)
    return sum/arr.length;
}

export const getRandInt = (min, max) => {

    return Math.floor(Math.random() * (max-min) + min);

}

export const getRandArbitrary = (min, max) => {
    return Math.random() * (max - min) + min;
}

export const stdDev = (arr) => {
    const avg = Mean(arr);
    const squareDiffs = arr.map(value => {
        let diff = value - avg;
        return diff * diff;
    });

    const avgSquareDiff = Mean(squareDiffs);
    return Math.sqrt(avgSquareDiff);    
}

export const getSubsets = (arr, length) => {

    // if(index == r){
    //     for(let j=0; j<r; j++){

    //     }
    // }

    // if(i>= n)return;

    // data[index] = arr[i]
    // getSubsets(arr, n, r, index+1, data, i+1)
    // getSubsets(arr, n, r, index, data, i+1)

    // return data;


    // return arr.reduce((subsets, value) => subsets.concat(
    //     subsets.map((set) => {
    //         // let s =
    //         // console.log(s)
    //         // console.log(s.length)
    //         // if(s.length == length)return s
    //         // else return [];
    //         [...set, value]
    //     })
    // ),
    // [[]]
    // );
}

export const SimplifyLine = (arr, expected) => {

    const data = [];
    let total = 0;

    for(let i=0; i< arr.length-1; i++){
        data.push({
            x:i/100,
            y:arr[i]
        })
    }
    let attempts = 0;
    let tolerance = stdDev(arr)/expected;

    let points;
    while(true){

        if(attempts == 10)break;
        attempts+=1;
        points = simplify(data, tolerance, false);
        if(points.length == expected)break;
        else if(points.length > expected){
            // if we have more points generated by the algo, we want to to increase the threshold
            tolerance = tolerance*1.25;
        }else if(points.length < expected){
            // if we have more less points than desired, we want to decrease the threshold
            tolerance = tolerance*.75;
        }   

        
    }
    console.log(points)
    const difference = Math.abs(points.length-expected);
    let index;
    for(let i=0; i<difference; i++){
        index = getRandInt(0, points.length-1);

        if(points.length < expected){
            points = points.slice(0, index+1).concat(points[index]).concat(points.slice(index));
        }
        if(points.length > expected){
            
            points = points.slice(0, index).concat(points.slice(index+1));

        }
    }


}